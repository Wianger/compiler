const int ArrLen = 20;
int arr[ArrLen];
int result[ArrLen];
int a[3] = {1, 2, 3};

void merge(int start, int mid, int end) {
    int k = 0;
    int i = start;
    int j = mid + 1;

    while (i <= mid && j <= end) {
        if (arr[i] < arr[j]) {
            result[k] = arr[i];
            k = k + 1;
            i = i + 1;
        } else {
            result[k] = arr[j];
            k = k + 1;
            j = j + 1;
        }
    }

    while (i <= mid) {
        result[k] = arr[i];
        k = k + 1;
        i = i + 1;
    }

    while (j <= end) {
        result[k] = arr[j];
        k = k + 1;
        j = j + 1;
    }

    int m = 0;
    while (m < k) {
        arr[start + m] = result[m];
        m = m + 1;
    }
}

void mergeSort(int start, int end) {
    if (start >= end)
        return;
    int mid = (start + end) / 2;
    mergeSort(start, mid);
    mergeSort(mid + 1, end);
    merge(start, mid, end);
}

int main() {
    int len = 10;
    int i = 0;
    while (i < len) {
        arr[i] = getint();
        i = i + 1;
    }

    mergeSort(0, len - 1);

    i = 0;
    while (i < len) {
        printf("arr[%d] = %d\n", i, arr[i]);
        i = i + 1;
    }

    return 0;
}