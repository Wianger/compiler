// 测试二维数组功能
int a[3][4] = {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}};

// 测试二维数组作为参数
void printArray(int arr[][4], int rows) {
    int i = 0;
    int j = 0;
    while (i < rows) {
        j = 0;
        while (j < 4) {
            printf("%d ", arr[i][j]);
            j = j + 1;
        }
        printf("\n");
        i = i + 1;
    }
}

// 测试二维数组元素修改
void modifyArray(int arr[][4], int rows) {
    int i = 0;
    int j = 0;
    while (i < rows) {
        j = 0;
        while (j < 4) {
            arr[i][j] = arr[i][j] * 2;
            j = j + 1;
        }
        i = i + 1;
    }
}

// 测试局部二维数组
void testLocalArray() {
    int local[2][3] = {{1, 2, 3}, {4, 5, 6}};
    int i = 0;
    int j = 0;
    while (i < 2) {
        j = 0;
        while (j < 3) {
            printf("%d ", local[i][j]);
            j = j + 1;
        }
        printf("\n");
        i = i + 1;
    }
}

int main() {
    // 打印全局二维数组
    printf("Original global array:\n");
    printArray(a, 3);
    
    // 修改全局二维数组
    modifyArray(a, 3);
    
    // 再次打印全局二维数组
    printf("\nModified global array:\n");
    printArray(a, 3);
    
    // 测试局部二维数组
    printf("\nLocal array:\n");
    testLocalArray();
    
    // 测试动态初始化的二维数组
    int b[2][2];
    b[0][0] = 100;
    b[0][1] = 200;
    b[1][0] = 300;
    b[1][1] = 400;
    
    printf("\nDynamically initialized array:\n");
    int i = 0;
    int j = 0;
    while (i < 2) {
        j = 0;
        while (j < 2) {
            printf("%d ", b[i][j]);
            j = j + 1;
        }
        printf("\n");
        i = i + 1;
    }
    
    return 0;
}